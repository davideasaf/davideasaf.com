---
alwaysApply: false
description: Dev-Workflow Agent — Worktree → Milestones → PR (with Model Disclosure)
---

## Dev-Workflow Agent: Worktree → Milestones → PR (with Model Disclosure)

Use this rule to run each development task in an isolated `git worktree`, commit at small milestones with standardized commit trailers, keep in sync via rebase, and open a draft PR that discloses the LLM/Gen-AI model and configuration used. Intended for agent-driven or scripted development.

### Assumptions

- **git ≥ 2.38**, **gh (GitHub CLI)**, and optionally **jq** are installed and on PATH.
- Running inside an existing clean repo clone; default remote `origin`, base branch `main`.
- Authenticated to GitHub (`gh auth status`) or `GH_TOKEN` is set.
- Agent has push rights (or will follow the optional fork flow).
- Agent can set env vars describing its LLM model/config.

### 1) Preflight

1. Assert tools
   - `git --version`, `gh --version`; optionally `jq --version`.
2. Assert auth
   - `gh auth status` must succeed (or `GH_TOKEN` set).
3. Assert cleanliness at repo root
   - `git status --porcelain` must be empty; otherwise abort with a clear message.
4. Fetch latest base
   - `git fetch origin main --prune`

### 2) Branch & Worktree (topic/ prefix)

- Create deterministic names:
  - `BRANCH="topic/<slug>-run<runId>-$(date +%Y%m%d-%H%M)"`
  - `WORKTREE="./_wt/${BRANCH}"`
- Add isolated worktree from latest `origin/main`:
  - `git worktree add --checkout "$WORKTREE" origin/main`
  - `(cd "$WORKTREE" && git switch -c "$BRANCH")`
- Safe local git config in worktree:
  - `git -C "$WORKTREE" config pull.rebase true`
  - `git -C "$WORKTREE" config commit.gpgsign false`

### 3) Milestone Commit Protocol

- Work only inside `$WORKTREE`. Commit in small milestones:
  - 1/3 – planning & interfaces
  - 2/3 – implementation & tests
  - 3/3 – docs & polish
- Commit message convention with trailers:

```
[agent] <concise summary>

Implements: <ISSUE-ID or URL if any>
Milestone: <i>/<n> – <short milestone title>
Agent: dev-workflow-bot@1.0
Model: <PROVIDER>/<MODEL_NAME>@<VERSION>
Model-Params: temperature=<t>; top_p=<p>; seed=<seed>; max_tokens=<n>
```

- Helper function (bash) to standardize commits:

```bash
agent_commit () {
  local msg="$1" ; local mi="$2" ; local of="$3" ; local title="$4"
  ( cd "$WORKTREE"
    git add -A
    if git diff --cached --quiet; then
      echo "No staged changes; skipping commit."; return 0
    fi
    git commit -m "[agent] ${msg}" \
      -m "Implements: ${ISSUE_ID:-}" \
      -m "Milestone: ${mi}/${of} – ${title}" \
      -m "Agent: ${AGENT_NAME:-dev-workflow-bot@1.0}" \
      -m "Model: ${MODEL_PROVIDER:-unknown}/${MODEL_NAME:-unknown}@${MODEL_VERSION:-unknown}" \
      -m "Model-Params: temperature=${MODEL_TEMPERATURE:-NA}; top_p=${MODEL_TOP_P:-NA}; seed=${MODEL_SEED:-NA}; max_tokens=${MODEL_MAX_TOKENS:-NA}"
  )
}
```

Keep commits focused. Do not batch unrelated edits.

### 4) Rebase Discipline (stay synced with main)

Before each milestone and before pushing/PR:

```bash
( cd "$WORKTREE"
  git fetch origin main
  git rebase origin/main || { echo "Rebase conflict—requires human review."; exit 2; }
)
```

Re-run fast tests after a successful rebase.

### 5) Push & Create Pull Request (with Model Disclosure)

1. Push the branch:
   - `( cd "$WORKTREE" && git push -u origin "$BRANCH" )`
2. Generate PR body including Model & Config section:

```bash
PR_BODY="$(mktemp)"
cat > "$PR_BODY" <<'EOF'
## Summary
<short explanation of the change, user impact, and why>

## Milestones
- [ ] 1/3 – planning & interfaces
- [ ] 2/3 – implementation & tests
- [ ] 3/3 – docs & polish

## Model & Config

Field	Value
Provider	${MODEL_PROVIDER:-unknown}
Model	${MODEL_NAME:-unknown}
Version	${MODEL_VERSION:-unknown}
Temperature	${MODEL_TEMPERATURE:-NA}
Top-p	${MODEL_TOP_P:-NA}
Seed	${MODEL_SEED:-NA}
Max tokens	${MODEL_MAX_TOKENS:-NA}

# Agent metadata
Agent: ${AGENT_NAME:-dev-workflow-bot@1.0}
Branch: ${BRANCH}
Worktree: ${WORKTREE}
Implements: ${ISSUE_ID:-}

## Validation
- Lints pass
- Unit tests pass
- CI green
- Docs updated (if needed)

## Notes
This PR was authored via an isolated git worktree by an agent.
EOF
```

3. Create a draft PR (promote when CI is green):

```bash
( cd "$WORKTREE" \
  && gh pr create \
    --title "${ISSUE_ID:+$ISSUE_ID: }${TASK_TITLE}" \
    --body-file "$PR_BODY" \
    --base "main" \
    --draft )

# Labels/reviewers (best-effort)
gh pr edit --add-label "agent" --add-label "needs-review" || true
[[ -n "${REVIEWERS:-}" ]] && gh pr edit --add-reviewer "$REVIEWERS" || true
```

### 6) CI & Status Watching

- Do not mark PR ready until checks are green:

```bash
gh pr checks --watch || { echo "CI failed—see checks."; exit 3; }
gh pr ready
```

Optionally post a summary comment with test results or coverage diffs.

### 7) Cleanup Policy

- On success (PR created): keep the worktree for follow-ups.
- On abort/failure before PR: remove safely:
  - `git worktree remove "$WORKTREE"`
  - `git branch -D "$BRANCH" || true`
- Janitor: periodically remove stale `./_wt/topic/*` older than N days.

### 8) Safety & Guardrails

- Enforce write scope: reject if diff touches outside allowed paths.
- Secrets: never commit tokens; use env vars; `.gitignore` should cover artifacts (e.g., `venv/`, `dist/`, `.env*`).
- Conventional structure: enforce commit trailers so runs are auditable.
- Human-help mode: if rebase conflicts or CI failures can’t be auto-fixed, post a PR comment with diagnostics and halt.

### 9) Optional: Fork Flow (no direct push rights)

```bash
gh repo fork --remote=true
REMOTE="fork"
git -C "$WORKTREE" push -u "$REMOTE" "$BRANCH"
gh pr create --repo "<upstream_owner>/<repo>" --base main --head "<your_user>:$BRANCH" --draft --title "${ISSUE_ID:+$ISSUE_ID: }${TASK_TITLE}" --body-file "$PR_BODY"
```

### 10) Minimal Agent API (pseudocode)

```text
env MODEL_PROVIDER, MODEL_NAME, MODEL_VERSION
env AGENT_NAME="dev-workflow-bot@1.0"

on_task_start(task):
  preflight()
  create_worktree_and_branch("topic/" + task.slug + "-run" + task.runId + "-<ts>")
  rebase_onto_main()

milestone(i, n, title, apply_changes):
  apply_changes(WORKTREE)
  rebase_onto_main()
  agent_commit(" " + title, i, n, title)

finish():
  rebase_onto_main()
  push_branch()
  open_draft_pr_with_model_disclosure()
  watch_ci_until_green()
  mark_pr_ready()
```

### 11) Ready-to-Use Shell Wrapper (reference)

Save the following as `scripts/dev_agent.sh` and call with `--task`, `--slug`, optionally `--issue`, `--reviewers`, `--labels`.

```bash
#!/usr/bin/env bash
set -euo pipefail
ROOT="$(git rev-parse --show-toplevel)"
BASE="${BASE_BRANCH:-main}"
REMOTE="${REMOTE:-origin}"
RUNID="${RUN_ID:-$(date +%s)}"
TASK=""; SLUG=""; ISSUE_ID="${ISSUE_ID:-}"; REVIEWERS=""; LABELS="${LABELS:-agent,automation}"
while [[ $# -gt 0 ]]; do
  case "$1" in
    --task) TASK="$2"; shift 2 ;;
    --slug) SLUG="$2"; shift 2 ;;
    --issue) ISSUE_ID="$2"; shift 2 ;;
    --reviewers) REVIEWERS="$2"; shift 2 ;;
    --labels) LABELS="$2"; shift 2 ;;
    *) echo "Unknown arg: $1"; exit 1 ;;
  esac
done
[[ -n "$TASK" && -n "$SLUG" ]] || { echo "Need --task and --slug"; exit 1; }

command -v git >/dev/null || { echo "git missing"; exit 1; }
command -v gh >/dev/null  || { echo "gh missing"; exit 1; }
gh auth status >/dev/null || { echo "gh not authenticated"; exit 1; }

cd "$ROOT"
[[ -z "$(git status --porcelain)" ]] || { echo "Repo not clean"; exit 1; }
git fetch "$REMOTE" "$BASE" --prune

TS="$(date +%Y%m%d-%H%M)"
BRANCH="topic/${SLUG}-run${RUNID}-${TS}"
WORKTREE="${ROOT}/_wt/${BRANCH}"
mkdir -p "$(dirname "$WORKTREE")"
git worktree add --checkout "$WORKTREE" "${REMOTE}/${BASE}"
git -C "$WORKTREE" switch -c "$BRANCH"
git -C "$WORKTREE" config pull.rebase true
git -C "$WORKTREE" config commit.gpgsign false

agent_commit () {
  local msg="$1" ; local mi="$2" ; local of="$3" ; local title="$4"
  ( cd "$WORKTREE"
    git add -A
    if git diff --cached --quiet; then echo "No changes; skip commit"; return 0; fi
    git commit -m "[agent] ${msg}" \
      -m "Implements: ${ISSUE_ID:-}" \
      -m "Milestone: ${mi}/${of} – ${title}" \
      -m "Agent: ${AGENT_NAME:-dev-workflow-bot@1.0}" \
      -m "Model: ${MODEL_PROVIDER:-unknown}/${MODEL_NAME:-unknown}@${MODEL_VERSION:-unknown}" \
      -m "Model-Params: temperature=${MODEL_TEMPERATURE:-NA}; top_p=${MODEL_TOP_P:-NA}; seed=${MODEL_SEED:-NA}; max_tokens=${MODEL_MAX_TOKENS:-NA}"
  )
}

rebase_main () {
  ( cd "$WORKTREE"
    git fetch "$REMOTE" "$BASE"
    git rebase "$REMOTE/$BASE" || { echo "Rebase conflict."; exit 2; }
  )
}

# --- agent performs work and calls agent_commit per milestone ---
# Example placeholder:
# echo "scaffold" > "$WORKTREE/AGENT_SENTINEL.txt"
# agent_commit "scaffold sentinel" "1" "3" "scaffold"

rebase_main
git -C "$WORKTREE" push -u "$REMOTE" "$BRANCH"

PR_BODY="$(mktemp)"
cat > "$PR_BODY" <<EOF
## Summary
$TASK

## Milestones
- [ ] 1/3 – planning & interfaces
- [ ] 2/3 – implementation & tests
- [ ] 3/3 – docs & polish

## Model & Config
| Field | Value |
|---|---|
| Provider | ${MODEL_PROVIDER:-unknown} |
| Model | ${MODEL_NAME:-unknown} |
| Version | ${MODEL_VERSION:-unknown} |
| Temperature | ${MODEL_TEMPERATURE:-NA} |
| Top-p | ${MODEL_TOP_P:-NA} |
| Seed | ${MODEL_SEED:-NA} |
| Max tokens | ${MODEL_MAX_TOKENS:-NA} |

```

Agent: ${AGENT_NAME:-dev-workflow-bot@1.0}
Branch: ${BRANCH}
Worktree: ${WORKTREE}
Implements: ${ISSUE_ID:-}

```

## Validation
- [ ] Lints pass
- [ ] Unit tests pass
- [ ] CI green
- [ ] Docs updated (if needed)

## Notes
This PR was authored via an isolated `git worktree` by an agent.
EOF

( cd "$WORKTREE"
  gh pr create --title "${ISSUE_ID:+$ISSUE_ID: }${TASK}" --body-file "$PR_BODY" --base "$BASE" --draft
  IFS=',' read -ra LBL <<<"$LABELS"; for l in "${LBL[@]}"; do gh pr edit --add-label "$l" || true; done
  [[ -n "$REVIEWERS" ]] && gh pr edit --add-reviewer "$REVIEWERS" || true
)
echo "PR opened for $BRANCH"
```

### 12) Environment Variables per Run

- Agent identity:
  - `AGENT_NAME=dev-workflow-bot@1.0`
- Model disclosure (required):
  - `MODEL_PROVIDER`, `MODEL_NAME`, `MODEL_VERSION`
  - Optional: `MODEL_TEMPERATURE`, `MODEL_TOP_P`, `MODEL_SEED`, `MODEL_MAX_TOKENS`
- Task metadata (optional):
  - `RUN_ID`, `ISSUE_ID`, `REVIEWERS`, `LABELS`
